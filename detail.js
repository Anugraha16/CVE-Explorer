document.addEventListener('DOMContentLoaded', () => {
    // Extract the CVE ID from the URL query parameters
    const urlParams = new URLSearchParams(window.location.search);
    const cveId = urlParams.get('cveId');
    
    // Check if the CVE ID is available in the URL
    if (cveId) {
        fetchCVEData(cveId);
    } else {
        console.error('CVE ID not provided in the URL');
    }
});

async function fetchCVEData(cveId) {
    try {
        const response = await fetch(`http://localhost:3000/cves?cveId=${cveId}`); //fetchData from MongoDB
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const data = await response.json();
        if (data && data.length > 0) {
            const cve = data[0];
            displayCVEDetails(cve);
        } else {
            console.error('CVE not found');
        }
    } catch (error) {
        console.error('Error fetching CVE data:', error);
    }
}



function displayCVEDetails(cve) {
    const cveDetailElement = document.getElementById('cveDetail');
    const description = cve.info.descriptions.find(desc => desc.lang === 'en').value;
    const cvssMetric = cve.info.metrics.cvssMetricV2[0].cvssData;
    const cvssData = cve.info.metrics.cvssMetricV2[0]
    const accessVector = cvssMetric.accessVector;
    const accessComplexity = cvssMetric.accessComplexity;
    const authentication = cvssMetric.authentication;
    const confidentialityImpact = cvssMetric.confidentialityImpact;
    const integrityImpact = cvssMetric.integrityImpact;
    const availabilityImpact = cvssMetric.availabilityImpact;
    const exploitabilityScore = cve.info.metrics.cvssMetricV2[0].exploitabilityScore;
    const impactScore = cve.info.metrics.cvssMetricV2[0].impactScore;
    const cpe = cve.info.configurations[0].nodes[0].cpeMatch[0];
    const criteria = cpe.criteria;
    const matchCriteriaId = cpe.matchCriteriaId;
    const vulnerable = cpe.vulnerable;
    const baseScore = cvssMetric.baseScore;
    const severity = cvssData.baseSeverity;
    const vectorString = cvssMetric.vectorString;

    cveDetailElement.innerHTML = `
        <p><strong>Description:</strong> ${description}</p>

        
        <p><strong>CVSS V2 Metrics:</strong></p>
        <p><strong>Severity:</strong> ${severity}</p>
        <p><strong>Score:</strong> ${baseScore}</p>
        <p><strong>Vector String:</strong> ${vectorString}</p>
        <p><strong>CVSS V2 Metrics:</strong></p>
        <table>
            <thead>
                <tr>
                    <th>Access Vector</th>
                    <th>Access Complexity</th>
                    <th>Authentication</th>
                    <th>Confidentiality Impact</th>
                    <th>Integrity Impact</th>
                    <th>Availability Impact</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>${accessVector}</td>
                    <td>${accessComplexity}</td>
                    <td>${authentication}</td>
                    <td>${confidentialityImpact}</td>
                    <td>${integrityImpact}</td>
                    <td>${availabilityImpact}</td>
                </tr>
            </tbody>
        </table>



        <p><strong>Scores:</strong></p>
        <ul>
            <li><strong>Exploitability Score:</strong> ${exploitabilityScore}</li>
            <li><strong>Impact Score:</strong> ${impactScore}</li>
        </ul>



        <p><strong>CPE:</strong></p>
        <table>
            <thead>
                <tr>
                    <th>Criteria</th>
                    <th>Match Criteria ID</th>
                    <th>Vulnerable</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>${criteria}</td>
                    <td>${matchCriteriaId}</td>
                    <td>${vulnerable}</td>
                </tr>
            </tbody>
        </table>
    `;
}

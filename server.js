// Import required modules
const express = require('express');
const mongoose = require('mongoose');
const cors=require('cors')


// Initialize Express app
const app = express();
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/securin', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Define Mongoose schema
const cveSchema = new mongoose.Schema({
  cveId: String,
  year: Number,
  score: Number,
  lastModified: Date,
});

// Define Mongoose model with explicit collection name
const CVE = mongoose.model('CVE', cveSchema, 'data');

// Define a route to handle requests to the root URL ("/")
app.get('/', (req, res) => {
    res.send('Welcome to the CVE API!'); // Send a welcome message
  });


// Define Express route to fetch CVE data with pagination and filtering
app.get('/cves', async (req, res) => {
    try {
      const page = parseInt(req.query.page) || 1; 
      const limit = parseInt(req.query.limit) || 10; // Default to limit 10 if not provided
      const skip = (page - 1) * limit;
  
      const filter = {};
    if (req.query.cveId) {
      filter.cveId = req.query.cveId;
    }
    
      const cveId=req.query.cveId  
      if (cveId) {
            const cve = await CVE.findOne({'info.id':cveId});
            if (!cve) {
                return res.status(404).json({ error: 'CVE not found' });
            }
            return res.json([cve]); 
        }
  
      // Query MongoDB based on pagination and filtering
      const cves = await CVE.find(filter).skip(skip).limit(limit);
  
      res.json(cves);
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'Internal Server Error' });
    }
});


// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});